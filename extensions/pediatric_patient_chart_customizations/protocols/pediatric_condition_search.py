import json
import arrow

from canvas_sdk.v1.data.command import Command
from canvas_sdk.v1.data.patient import Patient
from canvas_sdk.effects import Effect, EffectType
from canvas_sdk.events import EventType
from canvas_sdk.handlers.base import BaseHandler

ADULT_ONLY_ICD_CODES = {
    "A1814", "C9150", "C9151", "C9152", "E28310", "E28319", "F0150", "F01511",
    "F01518", "F0152", "F0153", "F0154", "F01A0", "F01A11", "F01A18", "F01A2",
    "F01A3", "F01A4", "F01B0", "F01B11", "F01B18", "F01B2", "F01B3", "F01B4",
    "F01C0", "F01C11", "F01C18", "F01C2", "F01C3", "F01C4", "F0390", "F03911",
    "F03918", "F0392", "F0393", "F0394", "F03A0", "F03A11", "F03A18", "F03A2",
    "F03A3", "F03A4", "F03B0", "F03B11", "F03B18", "F03B2", "F03B3", "F03B4",
    "F03C0", "F03C11", "F03C18", "F03C2", "F03C3", "F03C4", "F5083", "F5084",
    "F69", "G112", "G1221", "G301", "G9344", "H02031", "H02032", "H02033",
    "H02034", "H02035", "H02036", "H02039", "H02131", "H02132", "H02133", "H02134",
    "H02135", "H02136", "H02139", "H25011", "H25012", "H25013", "H25019", "H25031",
    "H25032", "H25033", "H25039", "H25041", "H25042", "H25043", "H25049", "H25091",
    "H25092", "H25093", "H25099", "H2510", "H2511", "H2512", "H2513", "H2520",
    "H2521", "H2522", "H2523", "H25811", "H25812", "H25813", "H25819", "H2589",
    "H259", "H31111", "H31112", "H31113", "H31119", "H3530", "H353110", "H353111",
    "H353112", "H353113", "H353114", "H353120", "H353121", "H353122", "H353123", "H353124",
    "H353130", "H353131", "H353132", "H353133", "H353134", "H353190", "H353191", "H353192",
    "H353193", "H353194", "H353210", "H353211", "H353212", "H353213", "H353220", "H353221",
    "H353222", "H353223", "H353230", "H353231", "H353232", "H353233", "H353290", "H353291",
    "H353292", "H353293", "H35441", "H35442", "H35443", "H35449", "H43821", "H43822",
    "H43823", "H43829", "I230", "I231", "I232", "I233", "I236", "I237",
    "I238", "I2510", "I25110", "I25111", "I25112", "I25118", "I25119", "I25700",
    "I25701", "I25702", "I25708", "I25709", "I25710", "I25711", "I25712", "I25718",
    "I25719", "I25720", "I25721", "I25722", "I25728", "I25729", "I25730", "I25731",
    "I25732", "I25738", "I25739", "I25752", "I25760", "I25761", "I25762", "I25768",
    "I25769", "I25790", "I25791", "I25792", "I25798", "I25799", "I25810", "I25812",
    "I2583", "I510", "I672", "I700", "I701", "I70201", "I70202", "I70203",
    "I70208", "I70209", "I70211", "I70212", "I70213", "I70218", "I70219", "I70221",
    "I70222", "I70223", "I70228", "I70229", "I70231", "I70232", "I70233", "I70234",
    "I70235", "I70238", "I70239", "I70241", "I70242", "I70243", "I70244", "I70245",
    "I70248", "I70249", "I7025", "I70261", "I70262", "I70263", "I70268", "I70269",
    "I70291", "I70292", "I70293", "I70298", "I70299", "I70301", "I70302", "I70303",
    "I70308", "I70309", "I70311", "I70312", "I70313", "I70318", "I70319", "I70321",
    "I70322", "I70323", "I70328", "I70329", "I70331", "I70332", "I70333", "I70334",
    "I70335", "I70338", "I70339", "I70341", "I70342", "I70343", "I70344", "I70345",
    "I70348", "I70349", "I7035", "I70361", "I70362", "I70363", "I70368", "I70369",
    "I70391", "I70392", "I70393", "I70398", "I70399", "I70401", "I70402", "I70403",
    "I70408", "I70409", "I70411", "I70412", "I70413", "I70418", "I70419", "I70421",
    "I70422", "I70423", "I70428", "I70429", "I70431", "I70432", "I70433", "I70434",
    "I70435", "I70438", "I70439", "I70441", "I70442", "I70443", "I70444", "I70445",
    "I70448", "I70449", "I7045", "I70461", "I70462", "I70463", "I70468", "I70469",
    "I70491", "I70492", "I70493", "I70498", "I70499", "I70501", "I70502", "I70503",
    "I70508", "I70509", "I70511", "I70512", "I70513", "I70518", "I70519", "I70521",
    "I70522", "I70523", "I70528", "I70529", "I70531", "I70532", "I70533", "I70534",
    "I70535", "I70538", "I70539", "I70541", "I70542", "I70543", "I70544", "I70545",
    "I70548", "I70549", "I7055", "I70561", "I70562", "I70563", "I70568", "I70569",
    "I70591", "I70592", "I70593", "I70598", "I70599", "I70601", "I70602", "I70603",
    "I70608", "I70609", "I70611", "I70612", "I70613", "I70618", "I70619", "I70621",
    "I70622", "I70623", "I70628", "I70629", "I70631", "I70632", "I70633", "I70634",
    "I70635", "I70638", "I70639", "I70641", "I70642", "I70643", "I70644", "I70645",
    "I70648", "I70649", "I7065", "I70661", "I70662", "I70663", "I70668", "I70669",
    "I70691", "I70692", "I70693", "I70698", "I70699", "I70701", "I70702", "I70703",
    "I70708", "I70709", "I70711", "I70712", "I70713", "I70718", "I70719", "I70721",
    "I70722", "I70723", "I70728", "I70729", "I70731", "I70732", "I70733", "I70734",
    "I70735", "I70738", "I70739", "I70741", "I70742", "I70743", "I70744", "I70745",
    "I70748", "I70749", "I7075", "I70761", "I70762", "I70763", "I70768", "I70769",
    "I70791", "I70792", "I70793", "I70798", "I70799", "I708", "I7090", "I7091",
    "I7092", "I83001", "I83002", "I83003", "I83004", "I83005", "I83008", "I83009",
    "I83011", "I83012", "I83013", "I83014", "I83015", "I83018", "I83019", "I83021",
    "I83022", "I83023", "I83024", "I83025", "I83028", "I83029", "I8310", "I8311",
    "I8312", "I83201", "I83202", "I83203", "I83204", "I83205", "I83208", "I83209",
    "I83211", "I83212", "I83213", "I83214", "I83215", "I83218", "I83219", "I83221",
    "I83222", "I83223", "I83224", "I83225", "I83228", "I83229", "I83811", "I83812",
    "I83813", "I83819", "I83891", "I83892", "I83893", "I83899", "I8390", "I8391",
    "I8392", "I8393", "I868", "I972", "J60", "J61", "J8482", "K311",
    "K700", "K7010", "K7011", "K702", "K7030", "K7031", "K7040", "K7041",
    "K709", "L6612", "M061", "M4210", "M4211", "M4212", "M4213", "M4214",
    "M4215", "M4216", "M4217", "M4218", "M4219", "M720", "M8000XA", "M8000XD",
    "M8000XG", "M8000XK", "M8000XP", "M8000XS", "M80011A", "M80011D", "M80011G", "M80011K",
    "M80011P", "M80011S", "M80012A", "M80012D", "M80012G", "M80012K", "M80012P", "M80012S",
    "M80019A", "M80019D", "M80019G", "M80019K", "M80019P", "M80019S", "M80021A", "M80021D",
    "M80021G", "M80021K", "M80021P", "M80021S", "M80022A", "M80022D", "M80022G", "M80022K",
    "M80022P", "M80022S", "M80029A", "M80029D", "M80029G", "M80029K", "M80029P", "M80029S",
    "M80031A", "M80031D", "M80031G", "M80031K", "M80031P", "M80031S", "M80032A", "M80032D",
    "M80032G", "M80032K", "M80032P", "M80032S", "M80039A", "M80039D", "M80039G", "M80039K",
    "M80039P", "M80039S", "M80041A", "M80041D", "M80041G", "M80041K", "M80041P", "M80041S",
    "M80042A", "M80042D", "M80042G", "M80042K", "M80042P", "M80042S", "M80049A", "M80049D",
    "M80049G", "M80049K", "M80049P", "M80049S", "M80051A", "M80051D", "M80051G", "M80051K",
    "M80051P", "M80051S", "M80052A", "M80052D", "M80052G", "M80052K", "M80052P", "M80052S",
    "M80059A", "M80059D", "M80059G", "M80059K", "M80059P", "M80059S", "M80061A", "M80061D",
    "M80061G", "M80061K", "M80061P", "M80061S", "M80062A", "M80062D", "M80062G", "M80062K",
    "M80062P", "M80062S", "M80069A", "M80069D", "M80069G", "M80069K", "M80069P", "M80069S",
    "M80071A", "M80071D", "M80071G", "M80071K", "M80071P", "M80071S", "M80072A", "M80072D",
    "M80072G", "M80072K", "M80072P", "M80072S", "M80079A", "M80079D", "M80079G", "M80079K",
    "M80079P", "M80079S", "M8008XA", "M8008XD", "M8008XG", "M8008XK", "M8008XP", "M8008XS",
    "M800AXA", "M800AXD", "M800AXG", "M800AXK", "M800AXP", "M800AXS", "M800B1A", "M800B1D",
    "M800B1G", "M800B1K", "M800B1P", "M800B1S", "M800B2A", "M800B2D", "M800B2G", "M800B2K",
    "M800B2P", "M800B2S", "M800B9A", "M800B9D", "M800B9G", "M800B9K", "M800B9P", "M800B9S",
    "M810", "M831", "M832", "M833", "M835", "M838", "M839", "M931",
    "N400", "N401", "N402", "N403", "N410", "N411", "N412", "N413",
    "N414", "N418", "N419", "N420", "N421", "N4281", "N4282", "N4283",
    "N4289", "N429", "N4601", "N46021", "N46022", "N46023", "N46024", "N46025",
    "N46029", "N4611", "N46121", "N46122", "N46123", "N46124", "N46125", "N46129",
    "N468", "N469", "N5201", "N5202", "N5203", "N521", "N522", "N5231",
    "N5232", "N5233", "N5234", "N5235", "N5236", "N5237", "N5239", "N528",
    "N529", "N6011", "N6012", "N6019", "N6481", "N6482", "N650", "N651",
    "R4181", "R4185", "R54", "R627", "R6882", "R9720", "R9721", "T7401XA",
    "T7401XD", "T7401XS", "T7411XA", "T7411XD", "T7411XS", "T7421XA", "T7421XD", "T7421XS",
    "T7431XA", "T7431XD", "T7431XS", "T7451XA", "T7451XD", "T7451XS", "T7461XA", "T7461XD",
    "T7461XS", "T7491XA", "T7491XD", "T7491XS", "T74A1XA", "T74A1XD", "T74A1XS", "T7601XA",
    "T7601XD", "T7601XS", "T7611XA", "T7611XD", "T7611XS", "T7621XA", "T7621XD", "T7631XA",
    "T7631XD", "T7631XS", "T7651XA", "T7651XD", "T7651XS", "T7661XA", "T7661XD", "T7661XS",
    "T7691XA", "T7691XD", "T7691XS", "T76A1XA", "T76A1XD", "T76A1XS", "Z0000", "Z0001",
    "Z0441", "Z0471", "Z31441", "Z31448", "Z421", "Z561", "Z681", "Z6820",
    "Z6821", "Z6822", "Z6823", "Z6824", "Z6825", "Z6826", "Z6827", "Z6828",
    "Z6829", "Z6830", "Z6831", "Z6832", "Z6833", "Z6834", "Z6835", "Z6836",
    "Z6837", "Z6838", "Z6839", "Z6841", "Z6842", "Z6843", "Z6844", "Z6845",
    "Z72811", "Z780", "Z8651", "Z91410", "Z91411", "Z91412", "Z91419", "Z9182",
    "Z9852",
}


class PediatricConditionSearch(BaseHandler):
    """
    Filter condition searches for pediatric patients.
    """

    RESPONDS_TO = [
        EventType.Name(EventType.DIAGNOSE__DIAGNOSE__POST_SEARCH),
        EventType.Name(EventType.MEDICAL_HISTORY__PAST_MEDICAL_HISTORY__POST_SEARCH),
        EventType.Name(EventType.CREATE_CODING_GAP__DIAGNOSE__POST_SEARCH),
        EventType.Name(EventType.ASSESS_CODING_GAP__DIAGNOSE__POST_SEARCH),
    ]

    def compute(self):
        """
        Remove condition search results representing codings that are resevered
        for adults if the patient is <= 15 years old.
        """
        results = self.context.get("results")

        if results is None:
            return [Effect(type=EffectType.AUTOCOMPLETE_SEARCH_RESULTS, payload=json.dumps(None))]

        # This event's target is the command we are searching within. Look up
        # the patient id from the command.
        patient_id = Command.objects.filter(id=self.target).values_list('patient__id', flat=True).first()

        fifteen_years_ago = arrow.now().shift(years=-15).date().isoformat()
        patient_is_pediatric = Patient.objects.filter(
            id=patient_id, birth_date__gt=fifteen_years_ago).exists()

        # If the patient is not pediatric, do not alter the search.
        if not patient_is_pediatric:
            return [Effect(type=EffectType.AUTOCOMPLETE_SEARCH_RESULTS, payload=json.dumps(None))]

        # Create our container for modified search results
        post_processed_results = []

        # Loop through the ICD 10 codes associated with the results
        for result in self.context["results"]:
            for coding in result.get("extra", {}).get("coding", []):
                if not coding.get("system") in ("http://hl7.org/fhir/sid/icd-10", "ICD-10"):
                    continue
                # If the ICD 10 code is not in the list of Adult-only codes,
                # we can add this result to what will ultimately be returned.
                if coding.get("code") not in ADULT_ONLY_ICD_CODES:
                    post_processed_results.append(result)
                    break

        # Return our modified search results
        return [
            Effect(
                type=EffectType.AUTOCOMPLETE_SEARCH_RESULTS,
                payload=json.dumps(post_processed_results),
            )
        ]
